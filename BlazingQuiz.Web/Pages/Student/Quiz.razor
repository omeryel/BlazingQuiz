@page "/student/quiz"

@inject NavigationManager NavigationManager
@inject QuizState quizState
@inject IStudentQuizApi StudentQuizApi

<SectionContent SectionName="pageTitle">Quiz - @quizState.Quiz.Name [<small>@quizState.Quiz.TotalQuestions</small>]</SectionContent>

<div class="row">


    <div class="col-sm-12">
        <h4 class="mt-3 mb-0 fw-bold">
            @_question.Text
        </h4>
        <hr />
        @foreach (var item in _question.Options)
        {
            <div class="d-flex gap-2 p-3 mb-3 bg-white option-box">
                <input type="radio" class="" name="rdo_@_question.Id" id="rdo_@item.Id"
                       checked="@(_selectedOptionId == item.Id)"
                       @onchange="() => _selectedOptionId = item.Id" />
                <label for="rdo_@item.Id" class="d-block">@item.Text</label>
            </div>
        }
        <hr />

        <div class="d-flex justify-content-between align-items-center">
            <button type="button" class="btn btn-danger" @onclick="ExitQuizAsync">Exit Test</button>
            @if (!IsLastQuestion)
            {
                <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuesionAsync">Save & Next</button>
            }
            else
            {
                <button type="button" class="btn btn-success" @onclick="SubmitAsync">Submit Quiz</button>

            }
        </div>

    </div>
</div>



@code {
    private QuestionDto? _question = new();
    private int _selectedOptionId;
    private List<QuestionDto> _questions = [];
    private bool IsLastQuestion => _questions.Count == (quizState.Quiz.TotalQuestions - 1);

    protected override async Task OnInitializedAsync()
    {
        if (quizState.Quiz == null || quizState.StudentQuizId == 0)
        {
            NavigationManager.NavigateTo("/student/home", replace: true);
            return;
        }


        QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(quizState.StudentQuizId);
        if (result.IsSuccess || result.Data == null)
        {
            return;
        }

        _question = result.Data;

    }

    private async Task ExitQuizAsync()
    {

    }

    private async Task SaveAndNextQuesionAsync()
    {
    }



    private async Task SubmitAsync()
    {

    }





}
