@page "/student/quiz"
@using BlazingQuiz.Shared.Components.Components

@layout QuizPageLayout

@inject NavigationManager NavigationManager
@inject QuizState quizState
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState


<SectionContent SectionName="pageTitle">Quiz - @quizState.Quiz?.Name [<small>@quizState.Quiz?.TotalQuestions</small>]</SectionContent>


@if (quizState.Quiz != null)
{


    <div class="row">


        <div class="col-sm-12">
            <div class="my-1 d-flex justify-content-between align-items-center">
                <h6>@_questions.Count of @quizState.Quiz.TotalQuestions </h6>
                <div>
                    <QuizTimer TotalMinutes="quizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync" />
                </div>
            </div>
            <h4 class="mt-3 mb-0 fw-bold">
                @_question.Text
            </h4>
            <hr />
            @foreach (var item in _question.Options)
            {
                <div class="d-flex gap-2 p-3 mb-3 bg-white option-box" @onclick="() => _selectedOptionId = item.Id">
                    <input type="radio" class="" name="rdo_@_question.Id" id="rdo_@item.Id"
                           checked="@(_selectedOptionId == item.Id)"
                           @onchange="() => _selectedOptionId = item.Id" />
                    <label for="rdo_@item.Id" class="d-block">@item.Text</label>
                </div>
            }

            @if (_errorMessage != null)
            {
                <div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
                    <label class="text-white">@_errorMessage</label>
                    <button type="button" class="btn btn-sm btn-light" @onclick="() => _errorMessage = null">X</button>
                </div>
            }

            <hr />

            <div class="d-flex justify-content-between align-items-center">
                <button type="button" class="btn btn-danger" @onclick="() => _showExitQuizConfirmation = true">Exit Test</button>
                @if (!IsLastQuestion)
                {
                    <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuesionAsync">Save & Next</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="SubmitAsync">Submit Quiz</button>

                }
            </div>

        </div>
    </div>


}
@if (_submitQuizMessage != null)
{
    <Modal Title="Quiz Submitted" OnActionButtonClick="RedirectToMyQuizes" OnCancelButtonClick="RedirectToMyQuizes">
        <p class="text-success h5">@_submitQuizMessage</p>
    </Modal>
}

@if (_showExitQuizConfirmation)
{
    <Modal Title="Exit Quiz?" ActionButtonText="Yes" OnActionButtonClick="ExitQuizAsync" OnCancelButtonClick="() => _showExitQuizConfirmation = false ">
        <p class="text-danger h5">Do you really want to exit the quiz?</p>
    </Modal>
}



@code {
    private QuestionDto? _question = new();
    private int _selectedOptionId;
    private List<QuestionDto> _questions = [];
    private bool IsLastQuestion => _questions.Count == quizState.Quiz.TotalQuestions;
    private string? _errorMessage;
    private string? _submitQuizMessage;
    private bool _showExitQuizConfirmation;


    protected override async Task OnInitializedAsync()
    {
        if (quizState.Quiz == null || quizState.StudentQuizId == 0)
        {
            NavigationManager.NavigateTo("/student/home", replace: true);
            return;
        }

        await LoadNextQuestionAsync();


    }

    private async Task SaveAndNextQuesionAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
        {
            await LoadNextQuestionAsync();
        }

    }


    private async Task SubmitAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
        {
            AppState.ShowLoader("Submitting the quiz");

            try
            {

                QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(quizState.StudentQuizId);
                if (!result.IsSuccess)
                {
                    _errorMessage = result.ErrorMessage;
                    return;
                }

                _submitQuizMessage = "Quiz submitted successfully";


            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
            }
            finally
            {
                AppState.HideLoader();
            }
        }



    }



    private async Task ExitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Exiting the quiz");
            QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(quizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }

            RedirectToMyQuizes();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            throw;
        }
        finally
        {
            AppState.HideLoader();
        }
    }



    private async Task<bool> SaveQuestionResponseAsync()
    {
        _errorMessage = null;
        if (_selectedOptionId == 0)
        {
            _errorMessage = "Please select an option";
            return false;
        }

        AppState.ShowLoader("Saving your reponse");

        try
        {
            StudentQuizQuestionResponseDto dto = new(quizState.StudentQuizId, _question.Id, _selectedOptionId);

            QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(quizState.StudentQuizId, dto);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return false;
            }

            _selectedOptionId = 0;
            return true;

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            return false;
        }
        finally
        {
            AppState.HideLoader();
        }
    }


    private async Task LoadNextQuestionAsync()
    {

        AppState.ShowLoader("Fetching question");
        try
        {
            QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(quizState.StudentQuizId);
            if (!result.IsSuccess || result.Data == null)
            {
                return;
            }
            _question = result.Data;
            _questions.Add(_question);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();

        }

    }


    private void RedirectToMyQuizes()
    {
        quizState.StopQuiz();
        NavigationManager.NavigateTo("student/my-quizes", replace: true);
    }

    private async Task AutoSubmitQuizAsync()
    {

        try
        {
            AppState.ShowLoader("Auto submitting the quiz");
            QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(quizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }

            RedirectToMyQuizes();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            throw;
        }
        finally
        {
            AppState.HideLoader();
        }
    }


}
