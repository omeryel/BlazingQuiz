@page "/auth/login"
@using BlazingQuiz.Web.Apis
@using BlazingQuiz.Web.Auth
@using System.Security.Claims

@layout EmptyLayout

@inject NavigationManager navigationManager
@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">

            <div class="mt-3">
                <h1 class="h3">Login | Blazing Quiz</h1>
            </div>
            <AuthorizeView>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
                <NotAuthorized>
                    <p>Not Authorized</p>
                </NotAuthorized>
                <Authorized>
                    <p>Authorized : @context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value</p>
                </Authorized>
            </AuthorizeView>

            <hr />
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">Username: </label>
                    <InputText @bind-Value="_model.Username" class="form-control" />
                    <ValidationMessage For="() => _model.Username" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password: </label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="() => _model.Password" />
                </div>

                @if (_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }


                <div class="mb-3">
                    @if (!_isLoading)
                    {
                        <button type="submit" class="btn btn-success">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Logging In...</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private LoginDto _model = new();

    private bool _isLoading;
    private string? _error;

    private async Task LoginAsync()
    {
        _error = null;
        _isLoading = true;

        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);

            if (authResponse.HasError)
            {
                _error = authResponse.ErrorMessage;
                return;
            }

            var loggedInUser = authResponse.user;
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);

            navigationManager.NavigateTo("/");

        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }
}


