@page "/admin/manage-categories"

@inject ICategoryApi CategoryApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Manage Categories</SectionContent>

<div class="container">



    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="_category" OnValidSubmit="SaveCategoryAsync">
                <DataAnnotationsValidator />
                <div class="bg-white p-3">
                    <h5 class="m-0 fw-bold">Add/Edit Category</h5>
                    <hr />
                    <div class="mb-3">
                        <label class="form-label">
                            Category Name
                        </label>
                        <InputText @bind-Value=_category.Name class="form-control form-control-sm" />
                        <ValidationMessage For="() => _category.Name" />

                        @if (_errorMessage != null)
                        {
                            <div class="mb-3 border border-danger border-1 d-flex justify-content-between gap-2 align-items-start">
                                <p class="m-0 p-1"> @_errorMessage </p>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => _errorMessage = null">X</button>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between align-items=center">
                        @if (!_isBusy)
                        {
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => _category = new()"> Cancel </button>
                            <button type="submit" class="btn btn-sm btn-success"> Save Category</button>
                        }
                        else
                        {
                            <button type="button" disabled class="btn btn-sm btn-secondary"> Cancel </button>
                            <button type="button" disabled class="btn btn-sm btn-secondary"> Saving Category... </button>
                        }
                    </div>

                </div>

            </EditForm>
        </div>
        <div class="col-sm-8 ms-auto">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>
                            Id
                        </th>
                        <th>Name</th>
                        <th>#</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_categories.Length == 0)
                    {
                        <tr>
                            <td colspan="4">
                                <p class="text-danger h5">
                                    No Categories found
                                </p>
                            </td>
                        </tr>
                    }
                    else
                    {
                        int number = 1;
                        @foreach (var category in _categories)
                        {
                            <tr>
                                <td>@(number++)</td>
                                <td>@category.Id</td>
                                <td>@category.Name</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => OnEditCategory(category))">Edit</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code {
    private CategoryDto[] _categories = [];
    private CategoryDto _category = new();

    private bool _isBusy;
    private string? _errorMessage;


    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Fetching Categories");
        await LoadCategoriesAsync();
        AppState.HideLoader();
    }

    private async Task LoadCategoriesAsync() =>
    _categories = await CategoryApi.GetCategoriesAsync();

    private void OnEditCategory(CategoryDto category)
    {
        _category = category;
    }

    private async Task SaveCategoryAsync()
    {
        try
        {
            AppState.ShowLoader("Saving Category");
            _isBusy = true;
            var response = await CategoryApi.SaveCategoryAsync(_category);
            if (!response.IsSuccess)
            {
                _errorMessage = response.ErrorMessage ?? "Unknown error in saving category";
            }

            _category = new();
            await LoadCategoriesAsync();

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isBusy = false;
            AppState.HideLoader();
        }


    }

}
